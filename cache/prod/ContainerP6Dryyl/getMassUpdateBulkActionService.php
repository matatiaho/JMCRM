<?php

namespace ContainerP6Dryyl;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMassUpdateBulkActionService extends App_KernelProdContainer
{
    /*
     * Gets the private 'App\Process\Service\BulkActions\MassUpdateBulkAction' shared autowired service.
     *
     * @return \App\Process\Service\BulkActions\MassUpdateBulkAction
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 3).'/core/backend/Process/Service/ProcessHandlerInterface.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Process/Service/BulkActions/MassUpdateBulkAction.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Data/Service/RecordMassUpdateServiceInterface.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Data/LegacyHandler/MassUpdateHandler.php';

        $a = ($container->privates['App\\Module\\LegacyHandler\\ModuleNameMapperHandler'] ?? self::getModuleNameMapperHandlerService($container));
        $b = new \App\Data\LegacyHandler\MassUpdateHandler(\dirname(__DIR__, 3), (\dirname(__DIR__, 3).'/public/legacy'), 'SCRMSESSID', 'SCRMSESSID', ($container->privates['App\\Engine\\LegacyHandler\\LegacyScopeState'] ??= new \App\Engine\LegacyHandler\LegacyScopeState()), $a, ($container->privates['App\\Data\\LegacyHandler\\RecordListHandler'] ?? $container->load('getRecordListHandlerService')), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));

        $c = ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container));

        $b->setLogger($c);

        $container->privates['App\\Process\\Service\\BulkActions\\MassUpdateBulkAction'] = $instance = new \App\Process\Service\BulkActions\MassUpdateBulkAction($a, $b);

        $instance->setLogger($c);

        return $instance;
    }
}
